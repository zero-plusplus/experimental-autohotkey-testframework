class Config extends Map {
  __New(flatEntries*) {
    Loop flatEntries.length // 2 {
      key := flatEntries[A_Index]
      value := flatEntries[A_Index + 1]
      this[key] := value
    }
  }
  /**
   * @return {UnitTest.Config}
   */
  static init() {
    argMap := UnitTest.Util.parseArgs((name, value) => [ NormalizeArgName(name), value ])
    config := UnitTest.Config(UnitTest.Util.flatEntries(argMap)*)
    return config

    /**
     * Replace the omitted argument name with the full name.
     * @param {string} argName
     * @return {string}
     */
    NormalizeArgName(argName) {
      switch (argName) {
        case "t": return "tests"
        case "s": return "skip"
        case "a": return "assert"
        case "r": return "reporter"
        case "v": return "verbose"
        case "b": return "bail"
        default: return UnitTest.Util.toCamelCase(argName)
      }
    }
  }
  /**
   * @return {Class}
   */
  getDefaultTestClass() {
    defaultTestClass := UnitTest.Util.reflectByName(this.getDefaultTestClassName())
    return defaultTestClass
  }
  /**
   * @return {string}
   */
  getDefaultTestClassName() {
    defaultTestClassName := RegExReplace(A_ScriptName, "\..+$", "")
    return defaultTestClassName
  }
  /**
   * @return {string[]}
   */
  getTestNames() {
    if (this.has("tests")) {
      return StrSplit(this["tests"], ",")
    }

    defaultTestClassName := this.getDefaultTestClassName()
    return [ defaultTestClassName ]
  }
  /**
   * @return {Class[]}
   */
  getTestClasses() {
    testClasses := []
    for i, testName in this.getTestNames() {
      testClass := UnitTest.Util.reflectByName(testName)
      testClasses.push(testClass)
    }
    return testClasses
  }
  /**
   * @return {UnitTest.rule.Tester}
   */
  getTester() {
    testerName := this.get("tester", "")
    if (!testerName) {
      return UnitTest.Assert
    }
    return UnitTest.Util.reflectByName(testerName)
  }
  /**
   * @return {UnitTest.rule.Reporter}
   */
  getReporter() {
    reporterName := this.get("reporter", "")
    if (!reporterName) {
      return UnitTest.CuiReporter
    }
    return UnitTest.Util.reflectByName(reporterName)
  }
}