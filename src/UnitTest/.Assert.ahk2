class Assert extends UnitTest.rule.Tester {
  /**
   * @param {boolean} expression
   * @param {string} [description := ""]
   */
  ok(expression, description := "") {
    this.result(UnitTest.Util.toBoolean(expression), description)
  }
  /**
   * @param {boolean} expression
   * @param {string} [description := ""]
   */
  notOk(expression, description := "") {
    this.result(!expression, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  equals(actual, expected, description := "") {
    this.result(UnitTest.Util.equals(actual, expected), description)
  }
  /**
   * @param {any} a
   * @param {any} expected
   * @param {string} [description := ""]
   */
  equalsIgnoreCase(actual, expected, description := "") {
    this.result(UnitTest.Util.equalsIgnoreCase(actual, expected), description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  deepEquals(actual, expected, description := "") {
    this.result(UnitTest.Util.deepEquals(actual, expected), description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notEquals(actual, expected, description := "") {
    this.result(actual !== expected, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notEqualsIgnoreCase(actual, expected, description := "") {
    this.result(!UnitTest.Util.equalsIgnoreCase(actual, expected), description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notDeepEquals(actual, expected, description := "") {
    this.result(!UnitTest.Util.deepEquals(actual, expected), description)
  }
}