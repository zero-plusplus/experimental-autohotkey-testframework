class Assert extends UnitTest.rule.Tester {
  /**
   * @param {boolean} expression
   * @param {string} [description := ""]
   */
  ok(expression, description := "") {
    success := UnitTest.Util.toBoolean(expression)
    this.result(success, expression, true, description)
  }
  /**
   * @param {boolean} expression
   * @param {string} [description := ""]
   */
  notOk(expression, description := "") {
    success := !expression
    this.result(success, expression, false, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  equals(actual, expected, description := "") {
    success := UnitTest.Util.equals(actual, expected)
    this.result(success, actual, expected, description)
  }
  /**
   * @param {any} a
   * @param {any} expected
   * @param {string} [description := ""]
   */
  equalsIgnoreCase(actual, expected, description := "") {
    success := UnitTest.Util.equalsIgnoreCase(actual, expected)
    this.result(success, actual, expected, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  deepEquals(actual, expected, description := "") {
    success := UnitTest.Util.deepEquals(actual, expected)
    this.result(success, actual, expected, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notEquals(actual, expected, description := "") {
    success := actual !== expected
    this.result(success, actual, expected, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notEqualsIgnoreCase(actual, expected, description := "") {
    success := !UnitTest.Util.equalsIgnoreCase(actual, expected)
    this.result(success, actual, expected, description)
  }
  /**
   * @param {any} actual
   * @param {any} expected
   * @param {string} [description := ""]
   */
  notDeepEquals(actual, expected, description := "") {
    success := !UnitTest.Util.deepEquals(actual, expected)
    this.result(success, actual, expected, description)
  }
  /**
   * @param {(params*) => any} callable
   * @param {string} [description := ""]
   */
  throws(callable, description := "") {
    try {
      callable()
      this.result(false, "No exception was raised.", "Exception was raised.", description)
      return
    }
    this.result(true, "Exception was raised.", "Exception was raised.", description)
  }
}