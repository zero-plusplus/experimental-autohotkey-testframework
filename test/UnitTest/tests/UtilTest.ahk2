#Include ..\common.ahk2

class UtilTest {
  testDeepEquals(assert) {
    assert.ok(UnitTest.Util.deepEquals([ "abc", "edf" ], [ "abc", "edf" ]))
    assert.notOk(UnitTest.Util.deepEquals([ "abc", "edf" ], [ "ABC", "EDF" ]))
    assert.ok(UnitTest.Util.deepEquals({ key: "value", nest: [ "value", "value2"] }, { key: "value", nest: [ "value", "value2"] }))
  }
  testDeepEqualsIgnoreCase(assert) {
    assert.ok(UnitTest.Util.deepEqualsIgnoreCase([ "abc", "edf" ], [ "abc", "edf" ]))
    assert.ok(UnitTest.Util.deepEqualsIgnoreCase([ "abc", "edf" ], [ "ABC", "EDF" ]))
  }
  testEquals(assert) {
    assert.ok(UnitTest.Util.equals("abc", "abc"))
    assert.notOk(UnitTest.Util.equals("abc", "Abc"))
  }
  testEqualsIgnoreCase(assert) {
    assert.ok(UnitTest.Util.equalsIgnoreCase("abc", "abc"))
    assert.ok(UnitTest.Util.equalsIgnoreCase("abc", "ABC"))
  }
  testGetEnum(assert) {
    assert.ok(UnitTest.Util.getEnum({}) is Enumerator)
    assert.ok(UnitTest.Util.getEnum([]) is Enumerator)
    assert.ok(UnitTest.Util.getEnum(Map()) is Enumerator)
  }
  testGetProp(assert) {
    assert.equals(UnitTest.Util.getProp({ key: "value" }, "key"), "value")
    assert.equals(UnitTest.Util.getProp(Map("key", "value"), "key"), "value")
    assert.equals(UnitTest.Util.getProp([ "value" ], 1), "value")

    assert.throws(() => UnitTest.Util.getProp({ key: "value" }, "unknown"))
  }
  testIncludes(assert) {
    assert.ok(UnitTest.Util.includes([ "a", "b", "c" ], "a"))
    assert.notOk(UnitTest.Util.includes([ "a", "b", "c" ], "d"))
  }
  testIsNamedFunc(assert) {
    assert.ok(UnitTest.Util.isNamedFunc(this.testIsNamedFunc))
  }
  testOwnKeys(assert) {
    assert.equals(UnitTest.Util.ownKeys([ "a", "b", "c"])[1], 1)
    assert.equals(UnitTest.Util.ownKeys({ key: "value" })[1], "key")
    assert.equals(UnitTest.Util.ownKeys(Map("key", "value"))[1], "key")
  }
  testRepeatStr(assert) {
    assert.equals(UnitTest.Util.repeatStr("a", 3), "aaa")
  }
  testSplitLines(assert) {
    assert.ok(UnitTest.Util.splitLines("a`nb`nc") is Array)
    assert.equals(UnitTest.Util.splitLines("a`nb`nc").length, 3)
    assert.equals(UnitTest.Util.splitLines("a`r`nb`r`nc").length, 3)
  }
  testTryGetProp(assert) {
    assert.equals(UnitTest.Util.tryGetProp({ key: "value" }, "unknown", "default"), "default")
  }
  testStringify(assert) {
    assert.equals(UnitTest.Util.stringify({ a: { b: [ Map("abc", 1) ] } }), '{ a: { b: [ [ "abc" => 1 ] ] } }')
  }
}